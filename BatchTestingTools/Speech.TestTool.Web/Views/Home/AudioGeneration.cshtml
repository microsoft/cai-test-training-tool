@model Speech.TestTool.Web.Models.AudioGenerationPageData
@{
    ViewData["Title"] = "AudioGeneration";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/lib/tabulator/dist/css/tabulator.css" />
<script type="text/javascript" src="~/lib/tabulator/dist/js/tabulator.js"></script>
<script type="text/javascript" src="~/js/azure-storage.blob.js"></script>
<script type="text/javascript" src="~/js/azure-storage.queue.js"></script>
<script type="text/javascript" src="~/js/azure-storage.table.js"></script>
<script type="text/javascript" src="~/js/moments.js"></script>
<script type="text/javascript" src="~/lib/adal/adal.min.js"></script>


<h1>AudioGeneration</h1>

<div style="align-items:center">
    <button id="btnShowModal" type="button"
            class="btn btn-sm btn-default pull-left col-lg-2 button button4">
        + Add new job
    </button>
</div>

<div id="jobs-table"></div>

<div class="modal fade" tabindex="-1" id="loginModal"
     data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    ×
                </button>
                <h4 class="modal-title">New Batch Job</h4>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <div>Transcript <label style="color:red">*</label> :</div>
                        <div>
                            <input name="transcriptfile" id="transcriptfile" type="file" style="width:500px">
                        </div>
                    </div>
                    <div class="form-group">
                        <div>
                            Job name <label style="color:red">*</label> :
                        </div>
                        <div>
                            <input name="jobName" id="jobName" type="text" style="width:500px">
                        </div>
                    </div>

                    <div class="form-group">
                        <div>
                            Speech Service: <label style="color:red">*</label>
                        </div>
                        <div>
                            <select name="speechServiceType" id="speechServiceType" onchange="handleLanguageChange()" style="width:500px"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        <div>
                            Language: <label style="color:red">*</label>
                        </div>
                        <div>
                            <select name="language" id="language"  onchange="handleLanguageChange()" style="width:500px"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        <div>
                            Voice: <label style="color:red">*</label>
                        </div>
                        <div>
                            <select name="speechServiceVoice" id="speechServiceVoice" style="width:500px"></select>
                        </div>
                    </div>

                </form>

                <div class="progress">
                    <div class="progress-bar" id="progress" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">0.0%</div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-xs btn-primary" id="upload-button" onclick="uploadBlobByStream(false)">Save Batch Job</button>
                <button type="button" id="btnHideModal" class="btn btn-primary button button4">
                    Hide
                </button>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>

        //define some sample data
        var tabledata = [
        ];

        var FileNameGuid;

        //create Tabulator on DOM element with id "example-table"
        var table = new Tabulator("#jobs-table", {
            height:"600",
            layout: "fitColumns", //fit columns to width of table (optional)
            initialSort: [{ column: "Timestamp._", dir: "desc" }],
            columns: [ //Define Table Columns
                { headerSort: false, field: "delete", tooltip: "Delete", formatter: "buttonCross", width: 30, cellClick: function (e, cell) { if (confirm("Are you sure you want to delete this test")) { HideBatchJob(cell.getRow().getData().RowKey._) } } },
                {
                    title: "Name", field: "jobName", formatter: function (cell, formatterParams, onRendered) {
                        //cell - the cell component
                        //formatterParams - parameters set for the column
                        //onRendered - function to call when the formatter has been rendered
                        if (cell.getRow().getData().Status._.includes("Completed")) {
                            return "<a href=@Url.Action("AudioGenerationResults", "Home")?id=" + encodeURI(cell.getRow().getData().RowKey._) + ">" + cell.getRow().getData().JobName._ +"</a>";
                        }
                        else {
                            return cell.getRow().getData().JobName._
                        }

                    },
                },
                { title: "Speech Service", field: "SpeechServiceType._"},

                { title: "Last Update Date", field: "Timestamp._", sorter: "date", width: 200 },

                { title: "Status", field: "Status._",  formatter: "textarea"},
                {
                    title: "Completion %", field: "CompletionPercentage._", align: "left", formatter: "progress", formatterParams: {
                        legend: true,
                        legendColor: "#000000",
                        legendAlign: "center",
                    }
                },
                {
                    title: "Generated", field: "GeneratedFileURL", formatter: function (cell, formatterParams, onRendered) {
                        //cell - the cell component
                        //formatterParams - parameters set for the column
                        //onRendered - function to call when the formatter has been rendered
                        if (cell.getRow().getData().Status._.includes("Completed")) {
                            return "<a href=" + cell.getRow().getData().GeneratedFileURL._  +" download>Download</a>";
                        }
                        else {
                            return ""
                        }

                    }
                },
                {
                    title: "Converted", field: "ConvertedFileURL", formatter: function (cell, formatterParams, onRendered) {
                        //cell - the cell component
                        //formatterParams - parameters set for the column
                        //onRendered - function to call when the formatter has been rendered
                        if (cell.getRow().getData().Status._.includes("Completed")) {
                            return "<a href=" + cell.getRow().getData().ConvertedFileURL._ + " download>Download</a>";
                        }
                        else {
                            return ""
                        }

                    }
                },
                {
                    title: "Noise", field: "NoiseFileURL", formatter: function (cell, formatterParams, onRendered) {
                        //cell - the cell component
                        //formatterParams - parameters set for the column
                        //onRendered - function to call when the formatter has been rendered
                        if (cell.getRow().getData().Status._.includes("Completed")) {
                            return "<a href=" + cell.getRow().getData().NoiseFileURL._ + " download>Download</a>";
                        }
                        else {
                            return ""
                        }

                    }
                }

            ]
        });

        var blobUri = 'https://' + '@Model.StorageInfo.StorageAccountName' + '.blob.core.windows.net';
        var blobService = AzureStorage.Blob.createBlobServiceWithSas(blobUri, '@Html.Raw(@Model.StorageInfo.StorageSAS)');
        var container = 'audiogeneration';

        $(document).ready(function () {
            //FillData('')
        });

        function displayProcess(process) {
            document.getElementById('progress').style.width = process + '%';
            document.getElementById('progress').innerHTML = process + '%';
        }

        function GetJobsData() {

            var tableUri = 'https://' + '@Model.StorageInfo.StorageAccountName' + '.table.core.windows.net';
            var tableService = AzureStorage.Table.createTableServiceWithSas(tableUri, '@Html.Raw(@Model.StorageInfo.StorageSAS)');

            var tableQuery = new AzureStorage.Table.TableQuery().where('not hide', true);
            tableService.queryEntities('AudioGenerationJobs', tableQuery, null, function (error, result) {
                if (error) {
                    // Query entities error
                } else {
                    tabledata = result.entries;
                    table.replaceData(tabledata);
                }
            });


        }

        function FillModelsDDL() {

            var speechTypes = JSON.parse('@Html.Raw(Json.Serialize(Model.SpeechTypes))');

             var ttsLanguages = JSON.parse('@Html.Raw(Json.Serialize(Model.TTSLanguages))');

            var speechVoices = JSON.parse('@Html.Raw(Json.Serialize(Model.MSSpeechVoices))').filter(function (v) {
                return v.locale == "de-DE";
            });

            var speechServiceTypeddl = $("#speechServiceType");

            var speechServiceVoiceddl = $("#speechServiceVoice");

            var languageddl = $("#language");

            $(ttsLanguages).each(function () {
                var option = $("<option />");
                option.html(this);
                option.val(this);
                //Add the Option element to DropDownList.
                languageddl.append(option);
            });

            $(speechTypes).each(function () {
                var option = $("<option />");
                option.html(this);
                option.val(this);
                //Add the Option element to DropDownList.
                speechServiceTypeddl.append(option);
            });

            $(speechVoices).each(function () {
                var option = $("<option />");
                option.html(this.displayName);
                option.val(this.name);
                //Add the Option element to DropDownList.
                speechServiceVoiceddl.append(option);
            });



        }


        function handleLanguageChange() {

            var MSVoices = JSON.parse('@Html.Raw(Json.Serialize(Model.MSSpeechVoices))');

            var GVoices = JSON.parse('@Html.Raw(Json.Serialize(Model.GoogleVoices))');

            var AmazonVoices = JSON.parse('@Html.Raw(Json.Serialize(Model.AmazonVoices))');

            var speechServiceTypeddl = $("#speechServiceType");

            var speechServiceVoiceddl = $("#speechServiceVoice");

            speechServiceVoiceddl.empty();

            var speechLanguage = $("#language");

            if (speechServiceTypeddl.val() == "Microsoft") {

                var speechVoices = MSVoices.filter(function (v) {
                    return v.locale == speechLanguage.val();
                });


                $(speechVoices).each(function () {
                    var option = $("<option />");
                    option.html(this.displayName);
                    option.val(this.shortName);
                    //Add the Option element to DropDownList.
                    speechServiceVoiceddl.append(option);
                });

            }
            else if (speechServiceTypeddl.val() == "Google") {
                var speechVoices = GVoices.filter(function (v) {
                    return v.languageCodes == speechLanguage.val();
                });


                $(speechVoices).each(function () {
                    var option = $("<option />");
                    option.html(this.name);
                    option.val(this.name);
                    //Add the Option element to DropDownList.
                    speechServiceVoiceddl.append(option);
                });
            }
            else if (speechServiceTypeddl.val() == "Amazon") {
                var speechVoices = AmazonVoices.filter(function (v) {
                    return v.languageCode.value == speechLanguage.val();
                });


                $(speechVoices).each(function () {
                    var option = $("<option />");
                    option.html(this.name);
                    option.val(this.name);
                    //Add the Option element to DropDownList.
                    speechServiceVoiceddl.append(option);
                });
            }

        }

        function uploadBlobByStream(checkMD5) {

            FileNameGuid= generateUUID();
            var transcriptFile = document.getElementById('transcriptfile').files;
            var JobName = $('#jobName').val();
            var language = $('#language').val();
            var audioFont = $('#speechServiceVoice').val();

            if (!transcriptFile.length) {
                alert('Please select a transcript file!');
                return;
            }

            if (!JobName) {
                alert('Please enter Job Name!');
                return;
            }

            if (!language) {
                alert('Please enter Language!');
                return;
            }

            if (!audioFont) {
                alert('Please audio voice!');
                return;
            }


            var transcriptFile = transcriptFile[0];

            if (!blobService)
                return;

            var btn = document.getElementById('upload-button');
            btn.disabled = true;
            btn.innerHTML = 'Uploading';



            // Make a smaller block size when uploading small blobs
            var transcriptBlockSize = transcriptFile.size > 1024 * 1024 * 32 ? 1024 * 1024 * 4 : 1024 * 512;

            var transcriptOptions = {
                storeBlobContentMD5: checkMD5,
                blockSize: transcriptBlockSize
            };

            var uploadAudio = false;

            blobService.singleBlobPutThresholdInBytes = transcriptBlockSize;
            var SpeechTypeValue = $('#speechServiceType').val();

            var finishedOrError = false;
            var speedSummaryTranscript = blobService.createBlockBlobFromBrowserFile(container, JobName + "-" + FileNameGuid + "/" + transcriptFile.name, transcriptFile, transcriptOptions, function (error, result, response) {
                finishedOrError = true;
                btn.disabled = false;
                btn.innerHTML = 'Save Batch Job';
                if (error) {
                    alert('Upload failed, open browser console for more detailed info.');
                    console.log(error);
                    displayProcess(0);
                } else {
                    displayProcess(100);
                    setTimeout(function () { // Prevent alert from stopping UI progress update
                        SaveSpeechJob(JobName, transcriptFile.name, SpeechTypeValue, FileNameGuid, language, audioFont);
                        alert("The file is uploaded successfully");
                        $('#transcriptfile').val("");

                        $('#jobName').val('');

                        var speechServiceTypeddl = $("#speechServiceType");



                        speechServiceTypeddl.prop("selectedIndex", 0);


                        GetJobsData();
                    }, 1000);
                }
            });




            function generateUUID() { // Public Domain/MIT
                var d = new Date().getTime();
                if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
                    d += performance.now(); //use high-precision timer if available
                }
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = (d + Math.random() * 16) % 16 | 0;
                    d = Math.floor(d / 16);
                    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
                });
            }



            speedSummaryTranscript.on('progress', function () {
                var process = speedSummaryTranscript.getCompletePercent();
                displayProcess(process);
            });


        }

        function HideBatchJob(JobId) {
            $.ajax({
                type: "GET",
                url: "/api/speech/HideAudioGenerationJob?jobId=" + JobId ,
                async: false,
                headers: {
                    'Authorization': 'Bearer ' + window.accessToken
                },
                success: function (res) {
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.error(xhr.status + thrownError);
                }
            });

            GetJobsData();
        }

        function RestartJob(JobId) {
            if (confirm("Are you sure you want to Restart this test")) {
                $.ajax({
                    type: "GET",
                    url: "/api/speech/RestartJob?jobId=" + JobId,
                    async: false,
                    headers: {
                        'Authorization': 'Bearer ' + window.accessToken
                    },
                    success: function (res) {
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        console.error(xhr.status + thrownError);
                    }
                });

                GetJobsData();
            }
        }

        function SaveSpeechJob(jobName,  transcriptFileName,  speechType  ,FileNameGuid, language, audioFont) {
            $.ajax({
                type: "GET",
                url: "/api/speech/SaveAudioGenerationJob?jobName=" + jobName + "&fileNameGuid=" + FileNameGuid + "&transcriptFileName=" + encodeURIComponent(transcriptFileName) + "&speechType=" + speechType + "&language=" + language + "&audioFont=" + audioFont ,
                async: false,
                headers: {
                    'Authorization': 'Bearer ' + window.accessToken
                },
                success: function (res) {
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.error(xhr.status + thrownError);
                }
            });
        };



        function FillData() {

            $("#btnShowModal").click(function () {
                $("#loginModal").modal('show');
            });

            $("#btnHideModal").click(function () {
                displayProcess(0);
                $("#loginModal").modal('hide');
            });

            GetJobsData();
            FillModelsDDL();

            window.setInterval(function () {
                /// call your function here
                GetJobsData();
            }, 10000);

        }
    </script>
    <script type="text/javascript" src="~/lib/adal/App.js"></script>
}





